name: Deploy financeiro-ratc

on:
  push:
    branches: [main]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --fund=false

      - name: Setup environment
        run: |
          echo "${{ secrets.ENV }}" > .env

      - name: Run Prisma generate
        run: npx prisma generate

      - name: Build application
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"
          NEXT_TELEMETRY_DISABLED: "1"
          SKIP_BUILD_CHECKS: "true"
          CI: "true"
          # Dummy DATABASE_URL for build time (Prisma types need it, but won't connect)
          DATABASE_URL: "mysql://user:pass@localhost:3306/db"
        run: npm run build

      - name: Prepare deployment bundle
        run: |
          set -euo pipefail
          DEPLOY_DIR=deploy-bundle
          rm -rf "$DEPLOY_DIR"
          mkdir -p "$DEPLOY_DIR"
          
          # When using standalone output, Next.js creates optimized bundle
          if [ -d ".next/standalone" ]; then
            # Flatten standalone output into deploy root so server.js is at the root
            cp -r .next/standalone/* "$DEPLOY_DIR/"
            mkdir -p "$DEPLOY_DIR/.next"
            cp -r .next/static "$DEPLOY_DIR/.next/static"
            cp -r public "$DEPLOY_DIR/" 2>/dev/null || true
            cp -r prisma "$DEPLOY_DIR/"
          else
            # Fallback to regular build
            cp -r .next "$DEPLOY_DIR/"
            cp -r public "$DEPLOY_DIR/" 2>/dev/null || true
            cp package.json package-lock.json "$DEPLOY_DIR/"
            cp -r prisma "$DEPLOY_DIR/"
            cp next.config.* "$DEPLOY_DIR/" 2>/dev/null || true
          fi

          # Verify prisma migrations are included
          echo "Checking prisma directory in deploy bundle:"
          ls -la "$DEPLOY_DIR/prisma/migrations/" || echo "Migrations not found in bundle!"

          # Create tarball
          tar -czf deploy.tar.gz -C "$DEPLOY_DIR" .

      - name: Ensure server directories exist
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script_stop: true
          script: |
            set -euo pipefail
            APP_DIR="/opt/financeiro-ratc"
            mkdir -p "${APP_DIR}/app" "${APP_DIR}/shared"
            [ -f "${APP_DIR}/shared/.env" ] || touch "${APP_DIR}/shared/.env"

      - name: Deploy to server via rsync
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: -avzr --delete
          path: deploy.tar.gz
          remote_path: /opt/financeiro-ratc/
          remote_host: ${{ secrets.VPS_HOST }}
          remote_user: ${{ secrets.VPS_USER }}
          remote_key: ${{ secrets.VPS_SSH_KEY }}
          remote_port: ${{ secrets.VPS_PORT || 22 }}

      - name: Extract and start application
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script_stop: true
          script: |
            set -euo pipefail
            APP_NAME="financeiro-ratc"
            APP_DIR="/opt/${APP_NAME}"
            APP_PATH="${APP_DIR}/app"
            SHARED_DIR="${APP_DIR}/shared"
            DOMAIN="financeiro.ratc.com.br"

            # Extract new build
            cd "${APP_DIR}"
            rm -rf "${APP_PATH}"/*
            mkdir -p "${APP_PATH}"
            tar -xzf deploy.tar.gz -C "${APP_PATH}"

            # Link shared .env file
            ln -sfn "${SHARED_DIR}/.env" "${APP_PATH}/.env"

            # Verify migrations were copied
            echo "Checking migrations directory:"
            ls -la "${APP_PATH}/prisma/migrations/" || echo "Migrations directory not found!"

            # Install production dependencies and run migrations
            cd "${APP_PATH}"
            
            # Check if using standalone build
            if [ -f "server.js" ]; then
              # Standalone build already contains necessary node_modules; skip install
              echo "Standalone build detected; skipping npm install on server"
            else
              # Regular build - install production dependencies
              # Use shared npm cache to speed up repeated installs
              export NPM_CONFIG_CACHE="${SHARED_DIR}/.npm"
              npm ci --omit=dev --prefer-offline --no-audit --fund=false
            fi
            
            npx prisma migrate deploy || echo "No pending migrations"

            # Restart or start application with PM2
            PORT="${PORT:-3000}"
            
            # Use standalone server if available, otherwise regular Next.js start
            if [ -f "server.js" ]; then
              START_CMD="node server.js"
            else
              START_CMD="node node_modules/next/dist/bin/next start -p ${PORT}"
            fi

            if pm2 describe "${APP_NAME}" >/dev/null 2>&1; then
              pm2 restart "${APP_NAME}" --update-env --time || echo "PM2 restart failed, but continuing"
            else
              pm2 start "$START_CMD" --name "${APP_NAME}" --time || echo "PM2 start failed, but continuing"
            fi

            pm2 save || echo "PM2 save failed, but continuing"

            # Cleanup
            rm -f "${APP_DIR}/deploy.tar.gz"

            echo "Deploy completed successfully for ${DOMAIN}"
