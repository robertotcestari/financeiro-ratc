// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums
enum AccountType {
  CHECKING // Conta Corrente
  SAVINGS // Poupança
  INVESTMENT // Investimento
}

enum CategoryType {
  INCOME // Receita
  EXPENSE // Despesa
  TRANSFER // Transferência (não afeta DRE)
  ADJUSTMENT // Ajuste de Saldo
}

enum ImportStatus {
  PENDING // Aguardando processamento
  PROCESSING // Em processamento
  COMPLETED // Concluído
  FAILED // Falhou
}

// 1. BankAccount (Contas Bancárias)
model BankAccount {
  id          String      @id @default(cuid())
  name        String      @unique // "CC - Sicredi", "CC - PJBank", "CI - XP"
  bankName    String // "Sicredi", "PJBank", "XP"
  accountType AccountType // CHECKING, SAVINGS, INVESTMENT
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  transactions       Transaction[]
  ofxAccountMappings OFXAccountMapping[]
  accountSnapshots   AccountSnapshot[]

  @@map("bank_accounts")
}

// 2. Category (Categorias)
model Category {
  id         String       @id @default(cuid())
  name       String       @unique
  type       CategoryType // INCOME, EXPENSE, TRANSFER, ADJUSTMENT
  parentId   String?
  parent     Category?    @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children   Category[]   @relation("CategoryHierarchy")
  level      Int // 1=Principal, 2=Subcategoria, 3=Detalhamento
  orderIndex Int // Para ordenação no DRE
  isSystem   Boolean      @default(false) // Categorias do sistema (não editáveis)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  transactions        ProcessedTransaction[]
  categorizationRules CategorizationRule[]
  suggestions         TransactionSuggestion[]

  @@map("categories")
}

// 3. City (Cidades)
model City {
  id        String   @id @default(cuid())
  code      String   @unique // "CAT", "COS", "SJP", etc.
  name      String   @unique // "Catanduva", "Cosmorama", etc.
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  properties Property[]

  @@map("cities")
}

// 4. Property (Imóveis)
model Property {
  id          String   @id @default(cuid())
  code        String   @unique // "CAT - Rua Brasil", "SJP - Av. Alberto Andaló"
  city        String // CAT, COS, SJP, RIB, SAO, SAL, SVC - Keep for now
  cityId      String? // Optional reference to City model
  cityRef     City?    @relation(fields: [cityId], references: [id])
  address     String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  transactions          ProcessedTransaction[]
  CategorizationRule    CategorizationRule[]
  TransactionSuggestion TransactionSuggestion[]

  @@map("properties")
}

// 4. Transaction (Transações Brutas)
model Transaction {
  id            String       @id @default(cuid())
  bankAccountId String
  bankAccount   BankAccount  @relation(fields: [bankAccountId], references: [id])
  date          DateTime
  description   String       @db.VarChar(1000)
  amount        Decimal      @db.Decimal(15, 2)
  // Optional running balance snapshot captured from CSVs (when available)
  balance       Decimal?     @db.Decimal(15, 2)
  ofxTransId    String? // ID da transação no arquivo OFX
  ofxAccountId  String? // ID da conta no arquivo OFX
  importBatchId String?
  importBatch   ImportBatch? @relation(fields: [importBatchId], references: [id])
  isDuplicate   Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  processedTransaction ProcessedTransaction?

  // Allow legitimate duplicates: uniqueness includes running balance snapshot
  @@unique([bankAccountId, date, amount, balance])
  @@index([date])
  @@index([importBatchId])
  @@index([ofxTransId])
  @@index([ofxAccountId])
  @@map("transactions")
}

// 4.1. OFXAccountMapping (Mapeamento de Contas OFX)
model OFXAccountMapping {
  id            String      @id @default(cuid())
  ofxAccountId  String // ID da conta no arquivo OFX
  ofxBankId     String? // ID do banco no arquivo OFX
  bankAccountId String
  bankAccount   BankAccount @relation(fields: [bankAccountId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([ofxAccountId, ofxBankId])
  @@index([bankAccountId])
  @@map("ofx_account_mappings")
}

// 5. ProcessedTransaction (Transações Processadas)
model ProcessedTransaction {
  id            String       @id @default(cuid())
  transactionId String?      @unique
  transaction   Transaction? @relation(fields: [transactionId], references: [id])

  year       Int
  month      Int
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])
  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id])

  details String? @db.Text // Detalhes adicionais
  notes   String? @db.Text // Observações do usuário

  isReviewed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  suggestions TransactionSuggestion[]

  @@index([year, month])
  @@index([categoryId])
  @@index([propertyId])
  @@map("processed_transactions")
}

model CategorizationRule {
  id          String  @id @default(cuid())
  name        String
  description String?
  isActive    Boolean @default(true)
  priority    Int     @default(0)

  // Target categorization (category OR property)
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id])

  // Rule criteria (JSON)
  criteria Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  suggestions TransactionSuggestion[]

  @@map("categorization_rules")
}

model TransactionSuggestion {
  id                     String               @id @default(cuid())
  processedTransactionId String
  processedTransaction   ProcessedTransaction @relation(fields: [processedTransactionId], references: [id])

  ruleId String
  rule   CategorizationRule @relation(fields: [ruleId], references: [id])

  // Suggested targets (category and/or property)
  suggestedCategoryId String?
  suggestedCategory   Category? @relation(fields: [suggestedCategoryId], references: [id])

  suggestedPropertyId String?
  suggestedProperty   Property? @relation(fields: [suggestedPropertyId], references: [id])

  confidence Float     @default(1.0)
  isApplied  Boolean   @default(false)
  appliedAt  DateTime?

  createdAt DateTime @default(now())

  @@unique([processedTransactionId, ruleId])
  @@map("transaction_suggestions")
}

// 8. AccountSnapshot (Snapshots Mensais de Saldo)
model AccountSnapshot {
  id            String      @id @default(cuid())
  bankAccountId String
  bankAccount   BankAccount @relation(fields: [bankAccountId], references: [id])

  year  Int
  month Int

  // Saldos do período
  openingBalance Decimal @db.Decimal(15, 2) // Saldo inicial do mês
  closingBalance Decimal @db.Decimal(15, 2) // Saldo final do mês

  // Movimentação do período
  totalDebits      Decimal @db.Decimal(15, 2) // Total de débitos
  totalCredits     Decimal @db.Decimal(15, 2) // Total de créditos
  transactionCount Int // Número de transações

  // Metadados
  isVerified   Boolean  @default(false) // Se foi verificado manualmente
  lastSyncedAt DateTime // Última vez que foi sincronizado
  notes        String?  @db.Text // Observações

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([bankAccountId, year, month])
  @@index([year, month])
  @@index([bankAccountId])
  @@map("account_snapshots")
}

// 9. ImportBatch (Controle de Importações)
model ImportBatch {
  id            String @id @default(cuid())
  fileName      String
  fileSize      Int
  bankAccountId String

  startDate        DateTime
  endDate          DateTime
  transactionCount Int

  status       ImportStatus
  errorMessage String?      @db.Text

  // OFX-specific fields
  fileType   String? @default("CSV") // "CSV" or "OFX"
  ofxVersion String? // "1.0", "2.0", etc.
  ofxBankId  String? // Bank ID from OFX file

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions Transaction[]

  @@map("import_batches")
}
